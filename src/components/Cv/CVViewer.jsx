import React, { useEffect, useState } from 'react';
import { Container, Alert, Button, Spinner } from 'react-bootstrap';
import { useLocation } from 'react-router-dom';
import axios from 'axios';
import './CVViewer.css';
import { Fade, Zoom } from "react-awesome-reveal";
import Lottie from "lottie-react";
import robotAnimation from './../../assets/Animation - 1751665771954.json'

const CVViewer = () => {
  const location = useLocation();
  const params = new URLSearchParams(location.search);
  const sessionId = params.get("sessionId");

  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [downloadUrl, setDownloadUrl] = useState(null);

  useEffect(() => {
    const generateCV = async () => {
      try {
        const response = await axios.post(
          `${import.meta.env.VITE_API_URL}/cv-generation/${sessionId}/generate`,
          {},
          {
            headers: {
              Authorization: `Bearer ${localStorage.getItem("token")}`,
              "ngrok-skip-browser-warning": "true",
            }
          }
        );

        const { downloadUrl } = response.data;

        if (downloadUrl) {
          setDownloadUrl(downloadUrl);
                  window.open(downloadUrl, "_blank");

        } else {
          throw new Error("Download URL not found.");
        }
      } catch (err) {
        console.error("CV generation error:", err);
        setError("Failed to generate your CV. Please try again.");
      } finally {
        setLoading(false);
      }
    };

    if (sessionId) {
      generateCV();
    } else {
      setError("Missing session ID.");
      setLoading(false);
    }
  }, [sessionId]);

  const developerId=localStorage.getItem("user_id")

const downloadDeveloperCV = async () => {
  try {
    const API = import.meta.env.VITE_API_URL;
    
    const response = await axios.get(
      `${API}/cv/download?type=developer&id=${developerId}&subtype=generated`,
      {
        headers: {
          Authorization: `Bearer ${localStorage.getItem("token")}`,
          "ngrok-skip-browser-warning": "true",
        },
        responseType: 'blob' // This is crucial for file downloads
      }
    );

    // Create a blob from the response data
    const blob = new Blob([response.data], { type: 'application/pdf' });
    const url = window.URL.createObjectURL(blob);
    
    // Create a temporary anchor element to trigger the download
    const a = document.createElement('a');
    a.href = url;
    a.download = 'Developer_CV.pdf'; // Set the filename
    document.body.appendChild(a);
    a.click();
    
    // Clean up
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);
  } catch (error) {
    console.error('Error downloading developer CV:', error);
    alert('Failed to download CV. Please try again.');
  }
};


  return (
    <Container className=" mt-5 ">
    <div className=" text-center p-4 d-flex flex-column justify-content-center align-items-center w-100">

  <Fade direction="down" cascade>
  <Lottie animationData={robotAnimation} loop={true} style={{ height: 150 }} />

    
  </Fade>

  {error ? (
    <Alert variant="danger">{error}</Alert>
  ) : loading ? (
    <>
      <p>Our smart bot is crafting your CV...</p>
    </>
  ) : (
    <Zoom>
      <Alert variant="success" className=' w-100'>
        Your professional CV has been generated by our AI engine ðŸ¤–.<br />
        You can now download it in PDF format.
      </Alert>

      <Button className=' Btn' size="lg" onClick={downloadDeveloperCV}>
        <i className="bi bi-download me-2"></i>
        Download CV
      </Button>

      <p className="mt-3 text-muted">
        Can't download?{" "}
        <a href="#" onClick={downloadDeveloperCV} className=' i'>
          Click here to try again
        </a>
      </p>
    </Zoom>
  )}
</div>
    </Container>
  );
};

export default CVViewer;
